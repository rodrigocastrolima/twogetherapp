rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Check if the user is an admin VIA CUSTOM CLAIMS
    function isAdmin() {
      // Check if the user is authenticated and has the 'admin' custom claim set to true
      return request.auth != null && request.auth.token.admin == true;
    }
    
    // Check if the user is the reseller associated with a conversation
    function isResellerOfConversation(conversationId) {
      let conversation = get(/databases/$(database)/documents/conversations/$(conversationId));
      return request.auth != null && 
        conversation.data.resellerId == request.auth.uid;
    }
    
    // Check if the user is the reseller in the data being written
    function isResellerInData() {
      return request.auth != null && 
             request.resource.data.resellerId == request.auth.uid;
    }
    
    // Check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
      // Allow users/admins to create user documents (adjust if needed)
      allow create: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
      // Allow admins to update any field, allow users to update ONLY specific fields
      allow update: if isAuthenticated() && (
                      isAdmin() || // Admins can update anything
                      (
                        request.auth.uid == userId && // It's their own document
                        // Ensure the update is not empty
                        request.resource.data.diff(resource.data).affectedKeys().size() >= 1 &&
                        // Ensure ONLY allowed keys are being updated
                        request.resource.data.diff(resource.data).affectedKeys()
                          .hasOnly(['isFirstLogin', 'firstLoginCompletedAt', 'fcmTokens', 'lastTokenUpdate', 'initialPasswordChanged']) // Added lastTokenUpdate
                      )
                    );
      // Only admins can delete users (adjust if needed)
      allow delete: if isAuthenticated() && isAdmin();
    }
    
    // Conversations collection
    match /conversations/{conversationId} {
      // Admins can read and write any conversation
      // Resellers can read and write only their own conversations
      allow create: if isAuthenticated() && (isAdmin() || isResellerInData());
      // Allow GETTING a specific document if admin or participant
      allow get: if isAuthenticated() && 
                    ( 
                      isAdmin() || // Admins can read anything
                      request.auth.uid in resource.data.participants // User is a participant
                    );
      // Allow LISTING (querying) the collection if authenticated.
      // The 'get' rule above will still secure the actual documents returned.
      allow list: if isAuthenticated();
      // Allow updates/deletes only by admin or the specific reseller
      allow update, delete: if isAuthenticated() && 
                              (isAdmin() || resource.data.resellerId == request.auth.uid);
      
      // Messages in conversations
      match /messages/{messageId} {
        // Allow read/write to messages if the user can access the parent conversation
        allow read, write: if isAuthenticated() && (
                             isAdmin() || 
                             request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants
                           );
      }
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      // Allow users to read their own notifications, system notifications, or if they're admin
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || resource.data.userId == 'system' || isAdmin());
      
      // Allow creation of notifications by any authenticated user
      allow create: if isAuthenticated() && (
        // Allow users to create their own notifications
        request.resource.data.userId == request.auth.uid ||
        // Allow creating system notifications (for admin dashboard)
        request.resource.data.userId == 'system'
      );
      
      // Allow admins to write all notifications
      allow update, delete: if isAuthenticated() && isAdmin();
      
      // Allow users to mark their own notifications as read
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid && 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead']);
      
      // Allow users to delete their own notifications
      allow delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }
    
    // Service submissions collection - snake_case version (keeping for backward compatibility)
    match /service_submissions/{submissionId} {
      // Allow authenticated users to create service submissions
      // Allow users to read and write their own submissions
      // Allow admins to read all submissions
      allow create: if isAuthenticated();
      allow read, update: if isAuthenticated() && 
        (resource.data.resellerId == request.auth.uid || isAdmin());
      allow delete: if isAuthenticated() && isAdmin();
    }
    
    // Service submissions collection - camelCase version (matches your code)
    match /serviceSubmissions/{submissionId} {
      // Allow authenticated users to create service submissions
      allow create: if isAuthenticated();

      // Allow GETTING a specific document if owner or admin
      allow get: if isAuthenticated() && 
                   (resource.data.resellerId == request.auth.uid || isAdmin());
      // Allow LISTING (querying) the collection ONLY if admin
      allow list: if isAuthenticated() && isAdmin();
      // Allow update remains the same
      allow update: if isAuthenticated() && 
                   (resource.data.resellerId == request.auth.uid || isAdmin());
      // Allow delete remains the same
      allow delete: if isAuthenticated() && isAdmin();
    }
    
    // Providers collection
    match /providers/{providerId} {
      allow read: if isAuthenticated(); // Any authenticated user can read provider info.
      allow create, update, delete: if isAdmin(); // Only Admins can manage providers.

      // Files subcollection within providers
      match /files/{fileId} {
        allow read: if isAuthenticated(); // Any authenticated user can read files.
        allow create, update, delete: if isAdmin(); // Only Admins can manage files.
      }
    }
    
    // Default rule - deny access to everything else
    match /{document=**} {
      allow read, write: if isAdmin();
    }
  }
} 